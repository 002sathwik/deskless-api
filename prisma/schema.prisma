generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id    Int    @id @default(autoincrement())
    name  String
    email String @unique

    emailVerified DateTime?
    password      String

    usn      String?
    sem      String?
    branchId String
    Branch   Branch  @relation(fields: [branchId], references: [id])
    role     Role    @default(USER)

    RefreshToken      RefreshToken[]
    VerificationToken VerificationToken[]
    Application       Application[]
    FeeVerification   FeeVerification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id      String           @id @default(cuid())
    revoked Boolean          @default(false)
    type    VerificationType @default(EMAIL_VERIFICATION)

    userId Int?
    User   User? @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RefreshToken {
    id          String  @id @default(cuid())
    hashedToken String
    revoked     Boolean @default(false)

    userId Int
    User   User @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Branch {
    id   String @id @default(cuid())
    name String

    User User[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Fee {
    id     String   @id @default(cuid())
    type   FeeType
    amount Float
    state  FeeState

    FeeVerification FeeVerification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FeeVerification {
    id            Int      @id @default(autoincrement())
    utrNumber     String
    bankName      String
    branch        String
    holderName    String
    amount        Int
    dateOfPayment DateTime

    userId Int?
    User   User? @relation(fields: [userId], references: [id])

    status FeeVerificationStatus

    feeId String
    Fee   Fee    @relation(fields: [feeId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Certificate {
    id          String @id @default(cuid())
    name        String
    description String
    price       Int    @default(50)

    applications Application[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Application {
    id String @id @default(cuid())

    name    String
    usn     String
    branch  String
    sem     String
    purpose String

    status ApplicationStatus @default(SENT)

    certificateId String
    Certificate   Certificate @relation(fields: [certificateId], references: [id])

    User   User? @relation(fields: [userId], references: [id])
    userId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum FeeType {
    EXAM
    CERTIFICATE
    OTHER
}

enum FeeState {
    PUBLISHED
    DRAFT
}

enum FeeVerificationStatus {
    SENT
    VERIFIED
    REJECTED
}

enum ApplicationStatus {
    SENT
    PENDING
    DONE
}

enum VerificationType {
    PASSWORD_RESET
    EMAIL_VERIFICATION
}

enum Role {
    USER
    ADMIN
    ACCOUNTANT
}
